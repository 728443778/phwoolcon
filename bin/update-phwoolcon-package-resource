#!/usr/bin/env php
<?php
/**
 * This file will be copied into directory "vendor/bin" after installation
 */

use Phwoolcon\Cache;
use Phwoolcon\Config;
use Phwoolcon\Db;
use Phwoolcon\DiFix;
use Phwoolcon\Events;

error_reporting(-1);

$baseDir = dirname(dirname(__DIR__));
if (!is_dir($baseDir . '/vendor/phwoolcon')) {
    $baseDir = $_SERVER['PWD'];
}
$vendorDir = $baseDir . '/vendor';

ob_start();
try {
    include $baseDir . '/bootstrap/start.php';
    $firstRun = false;
} catch (Exception $e) {
    $firstRun = true;
}
ob_end_clean();

if ($firstRun) {
    $viewPath = $baseDir . '/app/views/';
    $assetsBasePath = $baseDir . '/public';
    $assetsDir = 'assets';
    $replaceConfig = true;
} else {
    Events::register($di);
    DiFix::register($di);
    Db::register($di);
    Cache::register($di);
    Config::register($di);
    $viewPath = Config::get('view.path');
    $assetsBasePath = Config::get('view.options.assets_options.base_path', $baseDir . '/public');
    $assetsDir = Config::get('view.options.assets_options.assets_dir', 'assets');
    $replaceConfig = Config::get('app.on_phwoolcon_update.replace_config');
}

if (!function_exists('fileSaveArray')) {
    /**
     * @param string $filename
     * @param mixed  $array
     * @return int
     */
    function fileSaveArray($filename, $array)
    {
        return file_put_contents($filename, '<?php return ' . var_export($array, true) . ';');
    }
}

$configPath = $_SERVER['PHWOOLCON_CONFIG_PATH'];
$assetsPath = $assetsBasePath . '/' . $assetsDir . '/base/packages';
is_dir($configPath) or mkdir($configPath, 0755, true);
is_dir($assetsPath) or mkdir($assetsPath, 0755, true);

$packages = [];
$packageFiles = glob($vendorDir . '/bin/phwoolcon-package-*.php');

$diFiles = [];
$routeFiles = [];
$commands = [];
$aliases = [];

foreach ($packageFiles as $file) {
    if (!is_array($package = include($file))) {
        continue;
    }
    foreach ($package as $name => $resources) {
        $path = $vendorDir . '/' . $name;
        installConfig($name, $path, $configPath, $replaceConfig);
        installViews($name, $path, $viewPath);
        installAssets($name, $path, $assetsPath);
        foreach ($resources as $type => $value) {
            switch ($type) {
                case 'di':
                    installDi($name, $path, $value, $diFiles);
                    break;
                case 'routes':
                    installRoutes($name, $path, $value, $routeFiles);
                    break;
                case 'commands':
                    if (is_array($value)) {
                        $commands = array_merge_recursive($commands, $value);
                        echo sprintf('[%s]%s Installed commands', $name, spacePad($name)), PHP_EOL;
                    }
                    break;
                case 'class_aliases':
                    if (is_array($value)) {
                        $aliases = array_merge_recursive($aliases, $value);
                        echo sprintf('[%s]%s Registered class aliases', $name, spacePad($name)), PHP_EOL;
                    }
                    break;
            }
        }
    }
}
writeDi($diFiles);
writeRoutes($routeFiles);
writeCommands($commands);
writeAliases($aliases);

function installConfig($package, $path, $configPath, $replaceConfig = false)
{
    if ($files = glob($path . '/phwoolcon-package/config/*.php')) {
        foreach ($files as $source) {
            $file = basename($source);
            $destination = $configPath . '/' . $file;
            $installed = is_file($destination);
            if (($replaceConfig || !$installed)) {
                copy($source, $destination);
            }
        }
        echo sprintf('[%s]%s Installed config files', $package, spacePad($package)), PHP_EOL;
    }
}

function installViews($package, $path, $viewPath)
{
    if ($items = glob($path . '/phwoolcon-package/views/*')) {
        foreach ($items as $source) {
            $destination = $viewPath . basename($source);
            copyDirNoDelete($source, $destination);
        }
        echo sprintf('[%s]%s Updated views', $package, spacePad($package)), PHP_EOL;
    }
}

function installAssets($package, $path, $assetsPath)
{
    if ($items = glob($path . '/phwoolcon-package/assets/*')) {
        foreach ($items as $source) {
            $destination = $assetsPath . '/' . basename($source);
            copyDir($source, $destination);
        }
        echo sprintf('[%s]%s Updated assets', $package, spacePad($package)), PHP_EOL;
    }
}

function installDi($package, $path, $file, &$diFiles = [], $sort = null)
{
    if (is_array($file)) {
        foreach ($file as $realSort => $realFile) {
            installDi($package, $path, $realFile, $diFiles, $realSort);
        }
        return;
    }
    echo sprintf('[%s]%s DI registered', $package, spacePad($package)), PHP_EOL;
    $diFiles[$sort][] = $path . '/phwoolcon-package/' . $file;
}

function installRoutes($package, $path, $file, &$routeFiles = [], $sort = null)
{
    if (is_array($file)) {
        foreach ($file as $realSort => $realFile) {
            installRoutes($package, $path, $realFile, $routeFiles, $realSort);
        }
        return;
    }
    echo sprintf('[%s]%s Routes registered', $package, spacePad($package)), PHP_EOL;
    $routeFiles[$sort][] = $path . '/phwoolcon-package/' . $file;
}

function installCommands($package, $detected, &$commands = [])
{
    $commands = array_merge($commands, $detected);
    echo sprintf('[%s]%s Installed commands', $package, spacePad($package)), PHP_EOL;
}

function installClassAliases($package, $detected, &$aliases = [])
{
    $aliases = array_merge($aliases, $detected);
    echo sprintf('[%s]%s Installed commands', $package, spacePad($package)), PHP_EOL;
}

function writeDi($diFiles)
{
    $target = $GLOBALS['vendorDir'] . '/phwoolcon/di.php';
    fileSaveInclude($target, sortAndFlattenArray($diFiles));
}

function writeRoutes($routeFiles)
{
    $target = $GLOBALS['vendorDir'] . '/phwoolcon/routes.php';
    fileSaveInclude($target, sortAndFlattenArray($routeFiles));
}

function writeCommands($commands)
{
    $target = $GLOBALS['vendorDir'] . '/phwoolcon/commands.php';
    fileSaveArray($target, sortAndFlattenArray($commands));
}

function writeAliases($aliases)
{
    $target = $GLOBALS['vendorDir'] . '/phwoolcon/class_aliases.php';
    fileSaveArray($target, sortAndFlattenArray($aliases));
}

function sortAndFlattenArray($array)
{
    ksort($array);
    $flatArray = [];
    foreach ($array as $item) {
        $flatArray = array_merge($flatArray, $item);
    }
    return $flatArray;
}

function fileSaveInclude($target, array $includes)
{
    $content = '<?php' . PHP_EOL;
    foreach ($includes as $file) {
        $content .= "include '{$file}';" . PHP_EOL;
    }
    file_put_contents($target, $content);
}

function spacePad($str, $length = 20)
{
    $spaces = $length - strlen($str);
    return $spaces > 0 ? str_repeat(' ', $spaces) : ' ';
}

function removeDir($dir)
{
    if (is_dir($dir)) {
        $files = scandir($dir);
        foreach ($files as $file) {
            if ($file != '.' && $file != '..') {
                removeDir("$dir/$file");
            }
        }
        rmdir($dir);
    } elseif (file_exists($dir)) {
        unlink($dir);
    }
}

function copyDir($source, $destination)
{
    if (file_exists($destination)) {
        removeDir($destination);
    }
    if (is_dir($source)) {
        mkdir($destination, 0755, true);
        $files = scandir($source);
        foreach ($files as $file) {
            if ($file != '.' && $file != '..') {
                copyDir("$source/$file", "$destination/$file");
            }
        }
    } elseif (file_exists($source)) {
        copy($source, $destination);
    }
}

function copyDirNoDelete($source, $destination)
{
    if (is_dir($source)) {
        is_dir($destination) or mkdir($destination, 0755, true);
        $files = scandir($source);
        foreach ($files as $file) {
            if ($file != '.' && $file != '..') {
                copyDirNoDelete("$source/$file", "$destination/$file");
            }
        }
    } elseif (file_exists($source)) {
        copy($source, $destination);
    }
}
