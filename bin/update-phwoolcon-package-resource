#!/usr/bin/env php
<?php
/**
 * This file will be copied into directory "vendor/bin" after installation
 */

use Phwoolcon\Cache;
use Phwoolcon\Config;
use Phwoolcon\Db;
use Phwoolcon\DiFix;
use Phwoolcon\Events;

$baseDir = dirname(dirname(__DIR__));
if (!is_dir($baseDir . '/vendor/phwoolcon')) {
    $baseDir = $_SERVER['PWD'];
}
$vendorDir = $baseDir . '/vendor';

ob_start();
try {
    include $baseDir . '/bootstrap/start.php';
    $firstRun = false;
} catch (Exception $e) {
    $firstRun = true;
}
ob_end_clean();

if ($firstRun) {
    $assetsBasePath = $baseDir . '/public';
    $assetsDir = 'assets';
    $replaceConfig = true;
} else {
    Events::register($di);
    DiFix::register($di);
    Db::register($di);
    Cache::register($di);
    Config::register($di);
    $assetsBasePath = Config::get('view.options.assets_options.base_path', $baseDir . '/public');
    $assetsDir = Config::get('view.options.assets_options.assets_dir', 'assets');
    $replaceConfig = Config::get('app.on_phwoolcon_update.replace_config');
}

$configPath = $_SERVER['PHWOOLCON_CONFIG_PATH'];
$assetsPath = $assetsBasePath . '/' . $assetsDir . '/base/packages';
is_dir($configPath) or mkdir($configPath, 0777, true);
is_dir($assetsPath) or mkdir($assetsPath, 0777, true);

$packages = [];
$packageFiles = glob($vendorDir . '/bin/phwoolcon-package-*.php');

$diFiles = [];
$routeFiles = [];

foreach ($packageFiles as $file) {
    if (!is_array($package = include($file))) {
        continue;
    }
    foreach ($package as $name => $resources) {
        $path = $vendorDir . '/' . $name;
        foreach ($resources as $type => $value) {
            switch ($type) {
                case 'config':
                    installConfig($name, $path, $value, $configPath, $replaceConfig);
                    break;
                case 'assets':
                    installAssets($name, $path, $value, $assetsPath);
                    break;
                case 'di':
                    installDi($name, $path, $value, $diFiles);
                    break;
                case 'route':
                    installRoute($name, $path, $value, $routeFiles);
                    break;
            }
        }
    }
}
writeDi($diFiles);
writeRoutes($routeFiles);

function installConfig($package, $path, $file, $configPath, $replaceConfig = false)
{
    if (is_array($file)) {
        foreach ($file as $subFile) {
            installConfig($package, $path, $subFile, $configPath, $replaceConfig);
        }
        return;
    }
    if ([strpos($file, '..'), strpos($file, '/'), strpos($file, '\\')] != [false, false, false]) {
        return;
    }
    if (!is_file($source = $path . '/phwoolcon-package/config/' . $file)) {
        return;
    }
    $destination = $configPath . '/' . $file;
    $installed = is_file($destination);
    if (($replaceConfig || !$installed) && copy($source, $destination)) {
        $spaces = str_repeat(' ', 20 - strlen($package));
        echo sprintf('[%s]%s Installed config file %s', $package, $spaces, $file), PHP_EOL;
    }
}

function installAssets($package, $path, $file, $assetsPath)
{
    if (is_array($file)) {
        foreach ($file as $subFile) {
            installAssets($package, $path, $subFile, $assetsPath);
        }
        return;
    }
    if (strpos($file, '..') !== false) {
        return;
    }
    if (!is_file($source = $path . '/phwoolcon-package/assets/' . $file)) {
        return;
    }
    $destination = $assetsPath . '/' . $file;
    is_dir($dir = dirname($destination)) or mkdir($dir, 0777, true);
    if (copy($source, $destination)) {
        $spaces = str_repeat(' ', 20 - strlen($package));
        echo sprintf('[%s]%s Updated assets file %s', $package, $spaces, $file), PHP_EOL;
    }
}

function installDi($package, $path, $file, &$diFiles = [], $sort = null)
{
    if (is_array($file)) {
        foreach ($file as $realSort => $realFile) {
            installDi($package, $path, $realFile, $diFiles, $realSort);
        }
        return;
    }
    $spaces = str_repeat(' ', 20 - strlen($package));
    echo sprintf('[%s]%s DI registered', $package, $spaces), PHP_EOL;
    $diFiles[$sort][] = $path . '/phwoolcon-package/' . $file;
}

function installRoute($package, $path, $file, &$routeFiles = [], $sort = null)
{
    if (is_array($file)) {
        foreach ($file as $realSort => $realFile) {
            installRoute($package, $path, $realFile, $routeFiles, $realSort);
        }
        return;
    }
    $spaces = str_repeat(' ', 20 - strlen($package));
    echo sprintf('[%s]%s Routes registered', $package, $spaces), PHP_EOL;
    $routeFiles[$sort][] = $path . '/phwoolcon-package/' . $file;
}

function writeDi($diFiles)
{
    ksort($diFiles);
    $flatFiles = [];
    foreach ($diFiles as $realFiles) {
        $flatFiles = array_merge($flatFiles, $realFiles);
    }
    fileSaveInclude($GLOBALS['vendorDir'] . '/phwoolcon/di.php', $flatFiles);
}

function writeRoutes($routeFiles)
{
    ksort($routeFiles);
    $flatFiles = [];
    foreach ($routeFiles as $realFiles) {
        $flatFiles = array_merge($flatFiles, $realFiles);
    }
    fileSaveInclude($GLOBALS['vendorDir'] . '/phwoolcon/routes.php', $flatFiles);
}

function fileSaveInclude($target, array $includes)
{
    $content = '<?php' . PHP_EOL;
    foreach ($includes as $file) {
        $content .= "include '{$file}';" . PHP_EOL;
    }
    file_put_contents($target, $content);
}
